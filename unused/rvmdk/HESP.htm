<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\HESP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\HESP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Dec 02 20:00:47 2015
<BR><P>
<H3>Maximum Stack Usage =       1328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GSMprocessMessage &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SysCtlDelay</a><BR>
 <LI><a href="#[5e]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">SSIDataPut</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 109 times from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">KeyIdleTimer1IntHandler</a> from uart_echo.o(i.KeyIdleTimer1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">KeyPressTimer0IntHandler</a> from uart_echo.o(i.KeyPressTimer0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">MPR121IntHandler</a> from uart_echo.o(i.MPR121IntHandler) referenced from uart_echo.o(i.initI2C)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">SysTickIntHandler</a> from uart_echo.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">UARTIntHandler0</a> from uart_echo.o(i.UARTIntHandler0) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">UARTIntHandler1</a> from uart_echo.o(i.UARTIntHandler1) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[a]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[e]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[d]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[9]">main</a> from uart_echo.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[87]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[12]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[89]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[8b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgramNonBlocking
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[15]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4b]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMparseMessage
</UL>

<P><STRONG><a name="[39]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMsendSMS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMparseMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetSIMstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[3b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMparseMessage
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[80]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[48]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
</UL>

<P><STRONG><a name="[38]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMparseMessage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[19]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler1
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
</UL>

<P><STRONG><a name="[1b]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[90]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[1a]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1e]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[13]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[93]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[94]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[82]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>ADCSequenceConfigure</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[83]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[2a]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[27]"></a>ADCinit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart_echo.o(i.ADCinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADCinit &rArr; GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>ButtonsInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, buttons.o(i.ButtonsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ButtonsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>ButtonsPoll</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, buttons.o(i.ButtonsPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ButtonsPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[2d]"></a>EEPROMInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(i.EEPROMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>EEPROMProgramNonBlocking</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, eeprom.o(i.EEPROMProgramNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EEPROMProgramNonBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayStatusE2
</UL>

<P><STRONG><a name="[7e]"></a>EEPROMRead</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eeprom.o(i.EEPROMRead))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>FlashUserGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[5c]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121IntHandler
</UL>

<P><STRONG><a name="[6e]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[70]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[30]"></a>GPIOIntRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.GPIOIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[7d]"></a>GPIOIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[34]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[61]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[28]"></a>GPIOPinTypeADC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
</UL>

<P><STRONG><a name="[4e]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOff
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayLatch
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMtogglePower
</UL>

<P><STRONG><a name="[35]"></a>GSMcheckBalance</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, uart_echo.o(i.GSMcheckBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GSMcheckBalance &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1gets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>GSMcheckPower</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uart_echo.o(i.GSMcheckPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = GSMcheckPower &rArr; LCDclear &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDclear
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMtogglePower
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>GSMcheckSignal</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, uart_echo.o(i.GSMcheckSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GSMcheckSignal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[45]"></a>GSMcheckTime</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, uart_echo.o(i.GSMcheckTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GSMcheckTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>GSMgetIMEI</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart_echo.o(i.GSMgetIMEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GSMgetIMEI &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>GSMgetNum</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, uart_echo.o(i.GSMgetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GSMgetNum &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>GSMgetResponse</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uart_echo.o(i.GSMgetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GSMgetResponse &rArr; UART1gets &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1gets
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetSIMstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
</UL>

<P><STRONG><a name="[49]"></a>GSMgetSIMstatus</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart_echo.o(i.GSMgetSIMstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GSMgetSIMstatus &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>GSMparseMessage</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, uart_echo.o(i.GSMparseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GSMparseMessage &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
</UL>

<P><STRONG><a name="[4c]"></a>GSMprocessMessage</STRONG> (Thumb, 254 bytes, Stack size 944 bytes, uart_echo.o(i.GSMprocessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = GSMprocessMessage &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMparseMessage
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>GSMsendSMS</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, uart_echo.o(i.GSMsendSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GSMsendSMS &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1gets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>GSMtogglePower</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uart_echo.o(i.GSMtogglePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GSMtogglePower &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
</UL>

<P><STRONG><a name="[53]"></a>I2CMasterBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Csend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>

<P><STRONG><a name="[52]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Csend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>

<P><STRONG><a name="[54]"></a>I2CMasterDataGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>

<P><STRONG><a name="[51]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Csend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>

<P><STRONG><a name="[50]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Csend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>

<P><STRONG><a name="[4f]"></a>I2Creceive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart_echo.o(i.I2Creceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2Creceive
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121IntHandler
</UL>

<P><STRONG><a name="[55]"></a>I2Csend</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart_echo.o(i.I2Csend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2Csend
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMPR121
</UL>

<P><STRONG><a name="[32]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[31]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[8]"></a>KeyIdleTimer1IntHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_echo.o(i.KeyIdleTimer1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = KeyIdleTimer1IntHandler &rArr; MPR121toggleLock &rArr; relayStatusE2 &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>KeyPressTimer0IntHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart_echo.o(i.KeyPressTimer0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = KeyPressTimer0IntHandler &rArr; MPR121toggleLock &rArr; relayStatusE2 &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>LCDchar</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart_echo.o(i.LCDchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCDchar &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsetAddress
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121IntHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
</UL>

<P><STRONG><a name="[3f]"></a>LCDclear</STRONG> (Thumb, 188 bytes, Stack size 856 bytes, uart_echo.o(i.LCDclear))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = LCDclear &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsetAddress
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
</UL>

<P><STRONG><a name="[59]"></a>LCDsend</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart_echo.o(i.LCDsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3sendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsetAddress
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDclear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDchar
</UL>

<P><STRONG><a name="[58]"></a>LCDsetAddress</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart_echo.o(i.LCDsetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDclear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDchar
</UL>

<P><STRONG><a name="[40]"></a>LCDstring</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uart_echo.o(i.LCDstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCDstring &rArr; LCDchar &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
</UL>

<P><STRONG><a name="[f]"></a>MPR121IntHandler</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, uart_echo.o(i.MPR121IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPR121IntHandler &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayToggle
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDchar
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Creceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_echo.o(i.initI2C)
</UL>
<P><STRONG><a name="[56]"></a>MPR121toggleLock</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, uart_echo.o(i.MPR121toggleLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPR121toggleLock &rArr; relayStatusE2 &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayStatusE2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressTimer0IntHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIdleTimer1IntHandler
</UL>

<P><STRONG><a name="[5a]"></a>SSI3sendByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart_echo.o(i.SSI3sendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
</UL>

<P><STRONG><a name="[5f]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3sendByte
</UL>

<P><STRONG><a name="[74]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSSI3
</UL>

<P><STRONG><a name="[5e]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3sendByte
</UL>

<P><STRONG><a name="[75]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSSI3
</UL>

<P><STRONG><a name="[6d]"></a>SysCtlClockGet</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[2e]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>

<P><STRONG><a name="[7b]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>SysTickIntHandler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, uart_echo.o(i.SysTickIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysTickIntHandler &rArr; GSMcheckSignal &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsPoll
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMtogglePower
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>UART0StdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uart0stdio.o(i.UART0StdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0StdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>UART0printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, uart0stdio.o(i.UART0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBusy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayStatusE2
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler1
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121IntHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMtogglePower
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMsendSMS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetSIMstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[64]"></a>UART0vprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uart0stdio.o(i.UART0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
</UL>

<P><STRONG><a name="[65]"></a>UART0write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart0stdio.o(i.UART0write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0write
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0vprintf
</UL>

<P><STRONG><a name="[78]"></a>UART1StdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uart1stdio.o(i.UART1StdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1StdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>UART1gets</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, uart1stdio.o(i.UART1gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1gets &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1write
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler1
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMsendSMS
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetResponse
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[36]"></a>UART1printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, uart1stdio.o(i.UART1printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1vprintf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMsendSMS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetSIMstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
</UL>

<P><STRONG><a name="[67]"></a>UART1vprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uart1stdio.o(i.UART1vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1write
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
</UL>

<P><STRONG><a name="[66]"></a>UART1write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart1stdio.o(i.UART1write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1write
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1vprintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1gets
</UL>

<P><STRONG><a name="[63]"></a>UARTBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTBusy))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1printf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
</UL>

<P><STRONG><a name="[5]"></a>UARTIntHandler0</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart_echo.o(i.UARTIntHandler0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTIntHandler0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UARTIntHandler1</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, uart_echo.o(i.UARTIntHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = UARTIntHandler1 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1gets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[44]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[62]"></a>blinkLED</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, uart_echo.o(i.blinkLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blinkLED
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[6c]"></a>initI2C</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uart_echo.o(i.initI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = initI2C &rArr; GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>initLCD</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, uart_echo.o(i.initLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = initLCD &rArr; LCDclear &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDsend
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDclear
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>initMPR121</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, uart_echo.o(i.initMPR121))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = initMPR121 &rArr; I2Csend
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Csend
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>initSSI3</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uart_echo.o(i.initSSI3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = initSSI3 &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 2206 bytes, Stack size 280 bytes, uart_echo.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = main &rArr; GSMprocessMessage &rArr; UART1printf &rArr; UART1vprintf &rArr; UART1write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1StdioConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0StdioConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayStatusE2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSSI3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMPR121
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLCD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDclear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMsendSMS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMprocessMessage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetSIMstatus
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetNum
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMgetIMEI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckSignal
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckPower
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMcheckBalance
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCinit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[84]"></a>relayLatch</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart_echo.o(i.relayLatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = relayLatch
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
</UL>

<P><STRONG><a name="[85]"></a>relayOff</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart_echo.o(i.relayOff))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
</UL>

<P><STRONG><a name="[86]"></a>relayOn</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart_echo.o(i.relayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
</UL>

<P><STRONG><a name="[7f]"></a>relaySet</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uart_echo.o(i.relaySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = relaySet &rArr; LCDstring &rArr; LCDchar &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayOff
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayLatch
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDstring
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relayToggle
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>relayStatusE2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_echo.o(i.relayStatusE2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = relayStatusE2 &rArr; UART0printf &rArr; UART0vprintf &rArr; UART0write
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0printf
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgramNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121toggleLock
</UL>

<P><STRONG><a name="[5b]"></a>relayToggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_echo.o(i.relayToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = relayToggle &rArr; relaySet &rArr; LCDstring &rArr; LCDchar &rArr; LCDsetAddress &rArr; LCDsend &rArr; SSI3sendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPR121IntHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[6b]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
